{"version":3,"sources":["image404.jpg","bookmark-1.svg","landingPage.js","moviePage.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","useState","genre","setGenre","movieList","setMovieList","setError","filterRef","useRef","options","setOptions","apiKey","handleSearch","e","preventDefault","fetch","current","value","then","response","ok","json","data","useEffect","res","genres","movListAllGenre","forEach","genreEach","genreName","name","movieSpecificGenreLink","id","movListGenre","length","prev","retrieveMovieData","className","onSubmit","type","placeholder","ref","onClick","results","map","movie","slugPath","slugify","original_title","to","src","poster_path","onError","target","onerror","image","release_date","slice","entry","key","alt","Bookmark","MoviePage","useParams","isPresent","setIsPresent","movieData","setMovieData","movieCred","setMovieCred","filmCast","setFilmCast","director","setMovieDirector","movieDetAPILink","movieCredsAPILink","localStorage","getItem","rating","parseFloat","vote_average","document","querySelector","style","width","way","FilmCastPop","cast","sortedCast","sort","a","b","x","y","console","log","crew","directorEntry","find","job","removeItem","sluggedTitle","setItem","bookmarkItem","class","runtime","castMember","overview","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73fccfd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image404.2c7c28d0.jpg\";","export default __webpack_public_path__ + \"static/media/bookmark-1.c85c9d9c.svg\";","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport image from \"./image404.jpg\"\r\nimport './LandingPage.css';\r\nimport slugify from 'slugify';\r\nimport Bookmark from './bookmark-1.svg'\r\n\r\nfunction LandingPage() {\r\n\r\n    const [genre, setGenre] = useState([]);\r\n    const [movieList, setMovieList] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const filterRef = useRef();\r\n    const [options, setOptions] = useState([])\r\n\r\n    const apiKey = \"e0e9872a83bd28fe24d2a0e74ec4ad49\";\r\n    const genreRetrivalLink = \"https://api.themoviedb.org/3/genre/movie/list?api_key=\" + apiKey;\r\n    const movieSpecificGenre = \"https://api.themoviedb.org/3/discover/movie?api_key=\" + apiKey + \"&with_genres=\";\r\n\r\n    useEffect(() => {\r\n\r\n        function retrieveGenres() {\r\n            fetch(genreRetrivalLink).then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n            }).then(data => {\r\n                setGenre(data.genres);\r\n            })\r\n        }\r\n\r\n        retrieveGenres();\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        function retrieveMovieData() {\r\n            \r\n            var movListAllGenre = [];\r\n            genre.forEach(genreEach => {\r\n                const genreName = genreEach.name;\r\n                movListAllGenre[genreEach] = [];\r\n                var movieSpecificGenreLink = movieSpecificGenre + genreEach.id;\r\n                fetch(movieSpecificGenreLink).then((response) => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        setError(response);\r\n                    }\r\n                }).then(movListGenre => {\r\n                    if(movieList.length<genre.length){\r\n                        setMovieList((prev) => [...prev, { genre: genreName, data: [movListGenre] }])\r\n                    }\r\n                })\r\n            })\r\n            setMovieList(movListAllGenre)\r\n        }\r\n\r\n        retrieveMovieData()\r\n\r\n    }, [genre])\r\n\r\n    function handleSearch(e) {\r\n        e.preventDefault()\r\n        fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\"+apiKey+\"&query=\"+filterRef.current.value).then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            else {\r\n                setError(response);\r\n            }\r\n        }).then(data => {\r\n            setOptions(data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"landing-page\">\r\n            <div className=\"header\">\r\n                <div className=\"Banner\">\r\n                    Movinfo\r\n                </div>\r\n                <form onSubmit={handleSearch} className=\"search-bar\">\r\n                    <input type=\"text\" className=\"search-input\" placeholder=\"Enter movie name to search...\" ref={filterRef}>  \r\n                    </input>\r\n                    <button type=\"submit\" className=\"search-btn\" onClick={handleSearch}>Search</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"genre-map\">\r\n                {options && options.results && options.results.length>0 &&(\r\n                    <div className=\"genre-block\">\r\n                        <div className=\"genre-header\">\r\n                            Search Results ...\r\n                        </div>\r\n                        <div className=\"genre-movies\">\r\n                            {options.results && options.results.map((movie) => {\r\n                                const slugPath = slugify(movie.original_title, \"-\")\r\n                                return (\r\n                                    <div className=\"movie\">\r\n                                        <Link to={`/${movie.id}/${slugPath}/`}>\r\n                                            <img src={\"https://www.themoviedb.org/t/p/w600_and_h900_bestv2/\" + movie.poster_path} className=\"movie-poster\" onError={(e)=>{e.target.onerror = null; e.target.src=image }}/>\r\n                                        </Link>\r\n                                        {movie.original_title}{movie.release_date && (` (${movie.release_date.slice(0,4)})`)}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {movieList && movieList.length > 0 && movieList.map((entry, key) => {\r\n                    return (\r\n                        <div className=\"genre-block\" key={key}>\r\n                            <div className=\"genre-header\">\r\n                                {entry.genre}\r\n                            </div>\r\n                            <div className=\"genre-movies\">\r\n                                {entry.data[0].results && entry.data[0].results.map(movie => {\r\n                                    const slugPath = slugify(movie.original_title, \"-\")\r\n                                    return (\r\n                                        <div className=\"movie\">\r\n                                        <Link to={`/${movie.id}/${slugPath}/`}>\r\n                                            <img src={\"https://www.themoviedb.org/t/p/w600_and_h900_bestv2/\" + movie.poster_path} alt=\"image\" className=\"movie-poster\" onError={(e)=>{e.target.onerror = null; e.target.src=image }}/>\r\n                                        </Link>\r\n                                        {movie.original_title}{movie.release_date && (` (${movie.release_date.slice(0,4)})`)}\r\n                                    </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <Link to=\"/bookmarks\">\r\n                <div className=\"bookmarks\">\r\n                    <img src={Bookmark} alt=\"image\"></img>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport slugify from 'slugify';\r\nimport image from './image404.jpg'\r\nimport './LandingPage.css'\r\n\r\nfunction MoviePage() {\r\n    \r\n    const {id, slugPath} = useParams();\r\n    const [isPresent, setIsPresent] = useState(false);\r\n    const [movieData, setMovieData] = useState([])\r\n    const [movieCred, setMovieCred] = useState([])\r\n    const [filmCast, setFilmCast] = useState([])\r\n    const [director, setMovieDirector] = useState(null)\r\n\r\n    const apiKey = \"e0e9872a83bd28fe24d2a0e74ec4ad49\";\r\n    const movieDetAPILink = `https://api.themoviedb.org/3/movie/${id}?api_key=` + apiKey;\r\n    const movieCredsAPILink = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=` + apiKey;\r\n\r\n    useEffect (()=>{\r\n        fetch(movieDetAPILink).then(response => {\r\n            if(response.ok)\r\n                return response.json()\r\n            else\r\n                throw response;\r\n        }).then((data)=> {\r\n            setMovieData (data)\r\n\r\n            if(localStorage.getItem(data.id)) {\r\n                setIsPresent(true);\r\n            } else {\r\n                setIsPresent(false);\r\n            }\r\n\r\n            var rating = parseFloat(data.vote_average);\r\n\r\n            rating = (rating / 10) * 100;\r\n\r\n            document.querySelector (`.stars-inner`).style.width = rating + \"%\";\r\n        })\r\n    },[])\r\n\r\n    useEffect (()=>{\r\n        fetch(movieCredsAPILink).then(response => {\r\n            if(response.ok)\r\n                return response.json()\r\n            else\r\n                throw response;\r\n        }).then((data)=> {\r\n            setMovieCred (data);\r\n            var FilmCastPop = data.cast;\r\n            var sortedCast = sortJSON(FilmCastPop, \"order\", \"123\");\r\n\r\n            setFilmCast (sortedCast)\r\n            console.log (sortedCast)\r\n        })\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(movieCred && movieCred.crew) {\r\n            var directorEntry = movieCred.crew.find(entry => entry.job === \"Director\")\r\n            if(directorEntry) \r\n                setMovieDirector(directorEntry)\r\n        }\r\n    }, [movieCred])\r\n\r\n    function sortJSON(arr, key, way) {\r\n        return arr.sort(function(a, b) {\r\n            var x = a[key]; var y = b[key];\r\n            if (way === '123') { return ((x < y) ? -1 : ((x > y) ? 1 : 0)); }\r\n            if (way === '321') { return ((x > y) ? -1 : ((x < y) ? 1 : 0)); }\r\n        });\r\n    }\r\n\r\n    function bookmarkItem () {\r\n        var sluggedTitle = slugify(movieData.original_title, \"-\")\r\n        localStorage.setItem(movieData.id, sluggedTitle)\r\n        setIsPresent(true)\r\n    }\r\n    \r\n    function unbookmarkItem () {\r\n        localStorage.removeItem(movieData.id)\r\n        setIsPresent(false)\r\n    }\r\n\r\n    useEffect(()=> {\r\n    \r\n    },[localStorage])\r\n\r\n    return (\r\n        <div className=\"landing-page\">\r\n            {movieData && (\r\n                <>\r\n                <div className=\"header\">\r\n                    <div className=\"Banner\">\r\n                        Movinfo\r\n                    </div>\r\n                    {!isPresent ?  \r\n                    (<div className=\"button-parent\">\r\n                        <button className=\"btn\" onClick={()=>bookmarkItem()}>Bookmark</button>\r\n                    </div>) :  (<div className=\"button-parent\">\r\n                        <button className=\"btn\" onClick={()=>unbookmarkItem()}>Remove Bookmark</button>\r\n                    </div>)}\r\n                </div>\r\n                <div className=\"movieBox\">\r\n                    <div className=\"movieContainer\">\r\n                        <div className=\"imageContainer\">\r\n                            <img src={\"https://www.themoviedb.org/t/p/w600_and_h900_bestv2/\" + movieData.poster_path} className=\"image\" onError={(e)=>{e.target.onerror = null; e.target.src=image }}/>\r\n                        </div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div className=\"secondLevelContainer\">\r\n                                <div className=\"movie-heading\">\r\n                                    <div className=\"movie-title\">\r\n                                        {movieData.original_title} ( {movieData.vote_average==0?\"Unrated\" : parseFloat(movieData.vote_average)/2} )\r\n                                    </div>\r\n                                    <div class=\"stars-outer\">\r\n                                        <div class=\"stars-inner\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div id=\"row2\">\r\n                                    {movieData.release_date && (`${movieData.release_date.slice(0,4)} | `)}{movieData.runtime && `${movieData.runtime} mins` + \" | \"}{director && director.name}\r\n                                </div>\r\n                                <div id=\"row3\">\r\n                                    <span className=\"row3-head\">Cast:</span> \r\n                                    {filmCast && filmCast.length > 0 && filmCast.slice(0,4).map((castMember, key)=>{\r\n                                        return (\r\n                                            <span key={key}>\r\n                                                {key<3 ? `${castMember.name}` + \", \" : `${castMember.name}`}\r\n                                            </span>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <div id=\"row4\">\r\n                                    Plot: {movieData.overview}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviePage\r\n","import React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport LandingPage from './landingPage';\nimport MoviePage from './moviePage';\nimport './App.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/movinfo/\" component={LandingPage}></Route>\n        {/* <Route exact path=\"/browse\" component={LandingPage}></Route> */}\n        <Route exact path=\"/movinfo/:id/:slugPath/\" component={MoviePage}></Route>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}